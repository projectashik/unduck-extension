name: Build and Release Extension

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: read
      pull-requests: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js (for version management)
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Get version from manifest
      id: get_version
      run: |
        VERSION=$(grep '"version"' manifest.json | sed 's/.*"version": "\(.*\)".*/\1/')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extension version: $VERSION"
        
    - name: Create build directory
      run: mkdir -p build
      
    - name: Build Chrome/Chromium extension
      run: |
        mkdir -p build/chrome
        cp manifest.json build/chrome/
        cp popup.html build/chrome/
        cp -r icons build/chrome/
        
    - name: Build Firefox extension
      run: |
        mkdir -p build/firefox
        cp manifest-firefox.json build/firefox/manifest.json
        cp popup.html build/firefox/
        cp -r icons build/firefox/
        
    - name: Create ZIP packages
      run: |
        cd build/chrome
        zip -r ../unduck-extension-chrome-v${{ steps.get_version.outputs.version }}.zip .
        cd ../firefox
        zip -r ../unduck-extension-firefox-v${{ steps.get_version.outputs.version }}.zip .
        cd ../..
        
    - name: Upload Chrome build artifact
      uses: actions/upload-artifact@v4
      with:
        name: unduck-extension-chrome-v${{ steps.get_version.outputs.version }}
        path: build/unduck-extension-chrome-v${{ steps.get_version.outputs.version }}.zip
        
    - name: Upload Firefox build artifact
      uses: actions/upload-artifact@v4
      with:
        name: unduck-extension-firefox-v${{ steps.get_version.outputs.version }}
        path: build/unduck-extension-firefox-v${{ steps.get_version.outputs.version }}.zip
        
    - name: Check if tag exists and find next available version
      id: check_tag
      run: |
        BASE_VERSION="${{ steps.get_version.outputs.version }}"
        CURRENT_VERSION="$BASE_VERSION"
        COUNTER=0

        # Check if the base version tag exists
        if git rev-parse "v$BASE_VERSION" >/dev/null 2>&1; then
          echo "Tag v$BASE_VERSION already exists, finding next available version..."

          # Parse version parts
          IFS='.' read -ra VERSION_PARTS <<< "$BASE_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          # Increment patch version until we find an available tag
          while git rev-parse "v$CURRENT_VERSION" >/dev/null 2>&1; do
            PATCH=$((PATCH + 1))
            CURRENT_VERSION="$MAJOR.$MINOR.$PATCH"
          done

          echo "tag_exists=true" >> $GITHUB_OUTPUT
          echo "next_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Next available version: $CURRENT_VERSION"
        else
          echo "tag_exists=false" >> $GITHUB_OUTPUT
          echo "next_version=$BASE_VERSION" >> $GITHUB_OUTPUT
          echo "Using manifest version: $BASE_VERSION"
        fi

    - name: Create Release
      if: github.ref == 'refs/heads/main'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        RELEASE_VERSION="${{ steps.check_tag.outputs.next_version }}"
        echo "Creating release for version: $RELEASE_VERSION"

        gh release create "v$RELEASE_VERSION" \
          --title "Unduck Extension v$RELEASE_VERSION" \
          --notes "## Unduck Search Engine Extension v$RELEASE_VERSION

        A simple browser extension that sets [Unduck](https://unduck.link) as your default search engine for fast DuckDuckGo bang redirects.

        ### ðŸš€ Quick Installation

        **For Chromium browsers (Chrome, Brave, Edge, Opera):**
        1. Download \`unduck-extension-chrome-v${{ steps.get_version.outputs.version }}.zip\`
        2. Extract the ZIP file
        3. Go to your browser's extensions page (\`chrome://extensions/\`, etc.)
        4. Enable \"Developer mode\"
        5. Click \"Load unpacked\" and select the extracted folder

        **For Firefox:**
        1. Download \`unduck-extension-firefox-v${{ steps.get_version.outputs.version }}.zip\`
        2. Go to \`about:debugging\` in Firefox
        3. Click \"This Firefox\"
        4. Click \"Load Temporary Add-on\"
        5. Select the ZIP file directly

        **For Zen Browser:**
        1. Download \`unduck-extension-firefox-v${{ steps.get_version.outputs.version }}.zip\`
        2. Go to \`zen://debugging\`
        3. Click \"This Zen\"
        4. Click \"Load Temporary Add-on\"
        5. Select the ZIP file directly

        **For Vivaldi:**
        Extensions cannot set default search engines in Vivaldi. Please manually add Unduck:
        1. Go to \`vivaldi://settings/search/\`
        2. Add search engine with URL: \`https://unduck.link?q=%s\`

        ### ðŸ¤– AI-Generated Extension
        This entire extension was created using AI assistance!

        ### Credits
        - [Unduck](https://unduck.link) created by [Theo (T3)](https://github.com/t3dotgg)
        - Extension created to automate Unduck setup across multiple browsers" \
          "build/unduck-extension-chrome-v${{ steps.get_version.outputs.version }}.zip" \
          "build/unduck-extension-firefox-v${{ steps.get_version.outputs.version }}.zip"
